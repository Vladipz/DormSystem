// <auto-generated />
using System;
using Events.API.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Events.API.Migrations
{
    [DbContext(typeof(EventsDbContext))]
    [Migration("20250530151130_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.12");

            modelBuilder.Entity("Events.API.Entities.DormEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BuildingId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfAttendees")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            BuildingId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
                            Date = new DateTime(2025, 6, 6, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1576),
                            Description = "Welcome party for new dorm residents. Come meet your neighbors and enjoy some refreshments!",
                            IsPublic = true,
                            Location = "Main Hall - Alpha Building",
                            Name = "Welcome Party",
                            NumberOfAttendees = 50,
                            OwnerId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            BuildingId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
                            Date = new DateTime(2025, 6, 2, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1590),
                            Description = "Weekly study group for Computer Science students. Bring your textbooks and questions!",
                            IsPublic = true,
                            Location = "Study Room A - Alpha Building",
                            Name = "Study Group Session",
                            NumberOfAttendees = 15,
                            OwnerId = new Guid("22222222-2222-2222-2222-222222222222"),
                            RoomId = new Guid("cccccccc-dddd-eeee-ffff-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            BuildingId = new Guid("bbbbbbbb-cccc-dddd-eeee-ffffffffffff"),
                            Date = new DateTime(2025, 6, 13, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1595),
                            Description = "Board games, video games, and snacks! A fun evening for all dorm residents.",
                            IsPublic = true,
                            Location = "Common Room - Beta Building",
                            Name = "Game Night",
                            NumberOfAttendees = 25,
                            OwnerId = new Guid("22222222-2222-2222-2222-222222222222"),
                            RoomId = new Guid("dddddddd-eeee-ffff-aaaa-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            BuildingId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
                            Date = new DateTime(2025, 6, 1, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1599),
                            Description = "Monthly floor meeting to discuss community guidelines and upcoming events.",
                            IsPublic = false,
                            Location = "2nd Floor Common Area - Alpha Building",
                            Name = "Floor Meeting",
                            NumberOfAttendees = 20,
                            OwnerId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            BuildingId = new Guid("bbbbbbbb-cccc-dddd-eeee-ffffffffffff"),
                            Date = new DateTime(2025, 6, 9, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1602),
                            Description = "Free pizza night sponsored by the dorm council. First come, first served!",
                            IsPublic = true,
                            Location = "Main Dining Hall - Beta Building",
                            Name = "Pizza Night",
                            NumberOfAttendees = 100,
                            OwnerId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            BuildingId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
                            Date = new DateTime(2025, 6, 4, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1609),
                            Description = "Learn proper laundry techniques and machine usage. Perfect for first-year students!",
                            IsPublic = true,
                            Location = "Laundry Room - Alpha Building",
                            Name = "Laundry Workshop",
                            NumberOfAttendees = 12,
                            OwnerId = new Guid("33333333-3333-3333-3333-333333333333"),
                            RoomId = new Guid("eeeeeeee-ffff-aaaa-bbbb-cccccccccccc")
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            BuildingId = new Guid("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"),
                            Date = new DateTime(2025, 6, 7, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1612),
                            Description = "Advanced mathematics study session. Calculus and statistics focus.",
                            IsPublic = true,
                            Location = "Study Room B - Alpha Building",
                            Name = "Study Session - Advanced Math",
                            NumberOfAttendees = 8,
                            OwnerId = new Guid("22222222-2222-2222-2222-222222222222"),
                            RoomId = new Guid("cccccccc-dddd-eeee-ffff-bbbbbbbbbbbb")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            BuildingId = new Guid("bbbbbbbb-cccc-dddd-eeee-ffffffffffff"),
                            Date = new DateTime(2025, 6, 11, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1616),
                            Description = "Weekly movie night featuring classic films. Popcorn provided!",
                            IsPublic = true,
                            Location = "Common Room 2 - Beta Building",
                            Name = "Movie Night",
                            NumberOfAttendees = 30,
                            OwnerId = new Guid("11111111-1111-1111-1111-111111111111"),
                            RoomId = new Guid("dddddddd-eeee-ffff-aaaa-cccccccccccc")
                        });
                });

            modelBuilder.Entity("Events.API.Entities.EventParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventParticipants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            EventId = new Guid("22222222-2222-2222-2222-222222222222"),
                            JoinedAt = new DateTime(2025, 5, 29, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1670),
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("22222222-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            EventId = new Guid("22222222-2222-2222-2222-222222222222"),
                            JoinedAt = new DateTime(2025, 5, 29, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1674),
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("33333333-cccc-cccc-cccc-cccccccccccc"),
                            EventId = new Guid("44444444-4444-4444-4444-444444444444"),
                            JoinedAt = new DateTime(2025, 5, 28, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1676),
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("44444444-dddd-dddd-dddd-dddddddddddd"),
                            EventId = new Guid("44444444-4444-4444-4444-444444444444"),
                            JoinedAt = new DateTime(2025, 5, 29, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1678),
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("55555555-eeee-eeee-eeee-eeeeeeeeeeee"),
                            EventId = new Guid("66666666-6666-6666-6666-666666666666"),
                            JoinedAt = new DateTime(2025, 5, 27, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1680),
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("66666666-ffff-ffff-ffff-ffffffffffff"),
                            EventId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            JoinedAt = new DateTime(2025, 5, 30, 9, 11, 29, 909, DateTimeKind.Utc).AddTicks(1683),
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("77777777-aaaa-bbbb-cccc-dddddddddddd"),
                            EventId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            JoinedAt = new DateTime(2025, 5, 30, 3, 11, 29, 909, DateTimeKind.Utc).AddTicks(1686),
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("88888888-aaaa-bbbb-cccc-dddddddddddd"),
                            EventId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            JoinedAt = new DateTime(2025, 5, 30, 7, 11, 29, 909, DateTimeKind.Utc).AddTicks(1688),
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("99999999-aaaa-bbbb-cccc-dddddddddddd"),
                            EventId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            JoinedAt = new DateTime(2025, 5, 30, 11, 11, 29, 909, DateTimeKind.Utc).AddTicks(1690),
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("Events.API.Entities.InvitationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("InvitationTokens");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10101010-1010-1010-1010-101010101010"),
                            CreatedAt = new DateTime(2025, 5, 25, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1726),
                            EventId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ExpiresAt = new DateTime(2025, 6, 29, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1727),
                            IsActive = true,
                            Token = "WELCOME2024"
                        },
                        new
                        {
                            Id = new Guid("20202020-2020-2020-2020-202020202020"),
                            CreatedAt = new DateTime(2025, 5, 27, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1731),
                            EventId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ExpiresAt = new DateTime(2025, 6, 6, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1731),
                            IsActive = true,
                            Token = "STUDY2024"
                        },
                        new
                        {
                            Id = new Guid("30303030-3030-3030-3030-303030303030"),
                            CreatedAt = new DateTime(2025, 5, 29, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1734),
                            EventId = new Guid("66666666-6666-6666-6666-666666666666"),
                            ExpiresAt = new DateTime(2025, 6, 19, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1734),
                            IsActive = true,
                            Token = "GAME2024"
                        },
                        new
                        {
                            Id = new Guid("40404040-4040-4040-4040-404040404040"),
                            CreatedAt = new DateTime(2025, 5, 29, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1736),
                            EventId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ExpiresAt = new DateTime(2025, 6, 9, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1737),
                            IsActive = true,
                            Token = "LAUNDRY2024"
                        },
                        new
                        {
                            Id = new Guid("50505050-5050-5050-5050-505050505050"),
                            CreatedAt = new DateTime(2025, 5, 30, 9, 11, 29, 909, DateTimeKind.Utc).AddTicks(1739),
                            EventId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            ExpiresAt = new DateTime(2025, 6, 11, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1739),
                            IsActive = true,
                            Token = "MATH2024"
                        },
                        new
                        {
                            Id = new Guid("60606060-6060-6060-6060-606060606060"),
                            CreatedAt = new DateTime(2025, 5, 30, 13, 11, 29, 909, DateTimeKind.Utc).AddTicks(1742),
                            EventId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            ExpiresAt = new DateTime(2025, 6, 14, 15, 11, 29, 909, DateTimeKind.Utc).AddTicks(1742),
                            IsActive = true,
                            Token = "MOVIE2024"
                        });
                });

            modelBuilder.Entity("Events.API.Entities.EventParticipant", b =>
                {
                    b.HasOne("Events.API.Entities.DormEvent", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Events.API.Entities.InvitationToken", b =>
                {
                    b.HasOne("Events.API.Entities.DormEvent", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Events.API.Entities.DormEvent", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
